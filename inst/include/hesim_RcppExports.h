// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_hesim_RCPPEXPORTS_H_GEN_
#define RCPP_hesim_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace hesim {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("hesim", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("hesim", "hesim_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in hesim");
            }
        }
    }

    inline double rtruncnormC(double mean, double sd, double lower, double upper) {
        typedef SEXP(*Ptr_rtruncnormC)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_rtruncnormC p_rtruncnormC = NULL;
        if (p_rtruncnormC == NULL) {
            validateSignature("double(*rtruncnormC)(double,double,double,double)");
            p_rtruncnormC = (Ptr_rtruncnormC)R_GetCCallable("hesim", "hesim_rtruncnormC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rtruncnormC(Rcpp::wrap(mean), Rcpp::wrap(sd), Rcpp::wrap(lower), Rcpp::wrap(upper));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double qgompertzC(double p, double shape, double rate) {
        typedef SEXP(*Ptr_qgompertzC)(SEXP,SEXP,SEXP);
        static Ptr_qgompertzC p_qgompertzC = NULL;
        if (p_qgompertzC == NULL) {
            validateSignature("double(*qgompertzC)(double,double,double)");
            p_qgompertzC = (Ptr_qgompertzC)R_GetCCallable("hesim", "hesim_qgompertzC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_qgompertzC(Rcpp::wrap(p), Rcpp::wrap(shape), Rcpp::wrap(rate));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double rgompertzC(double shape, double rate) {
        typedef SEXP(*Ptr_rgompertzC)(SEXP,SEXP);
        static Ptr_rgompertzC p_rgompertzC = NULL;
        if (p_rgompertzC == NULL) {
            validateSignature("double(*rgompertzC)(double,double)");
            p_rgompertzC = (Ptr_rgompertzC)R_GetCCallable("hesim", "hesim_rgompertzC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rgompertzC(Rcpp::wrap(shape), Rcpp::wrap(rate));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double qllogisC(double p, double shape, double scale, int lt = 1, int lg = 0) {
        typedef SEXP(*Ptr_qllogisC)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_qllogisC p_qllogisC = NULL;
        if (p_qllogisC == NULL) {
            validateSignature("double(*qllogisC)(double,double,double,int,int)");
            p_qllogisC = (Ptr_qllogisC)R_GetCCallable("hesim", "hesim_qllogisC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_qllogisC(Rcpp::wrap(p), Rcpp::wrap(shape), Rcpp::wrap(scale), Rcpp::wrap(lt), Rcpp::wrap(lg));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double rllogisC(double shape, double scale) {
        typedef SEXP(*Ptr_rllogisC)(SEXP,SEXP);
        static Ptr_rllogisC p_rllogisC = NULL;
        if (p_rllogisC == NULL) {
            validateSignature("double(*rllogisC)(double,double)");
            p_rllogisC = (Ptr_rllogisC)R_GetCCallable("hesim", "hesim_rllogisC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rllogisC(Rcpp::wrap(shape), Rcpp::wrap(scale));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double rgengammaC(double mu, double sigma, double Q) {
        typedef SEXP(*Ptr_rgengammaC)(SEXP,SEXP,SEXP);
        static Ptr_rgengammaC p_rgengammaC = NULL;
        if (p_rgengammaC == NULL) {
            validateSignature("double(*rgengammaC)(double,double,double)");
            p_rgengammaC = (Ptr_rgengammaC)R_GetCCallable("hesim", "hesim_rgengammaC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rgengammaC(Rcpp::wrap(mu), Rcpp::wrap(sigma), Rcpp::wrap(Q));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double rpwexp1C(arma::rowvec rate, arma::rowvec time) {
        typedef SEXP(*Ptr_rpwexp1C)(SEXP,SEXP);
        static Ptr_rpwexp1C p_rpwexp1C = NULL;
        if (p_rpwexp1C == NULL) {
            validateSignature("double(*rpwexp1C)(arma::rowvec,arma::rowvec)");
            p_rpwexp1C = (Ptr_rpwexp1C)R_GetCCallable("hesim", "hesim_rpwexp1C");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rpwexp1C(Rcpp::wrap(rate), Rcpp::wrap(time));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline std::vector<double> rpwexpC(arma::mat rate, arma::rowvec time) {
        typedef SEXP(*Ptr_rpwexpC)(SEXP,SEXP);
        static Ptr_rpwexpC p_rpwexpC = NULL;
        if (p_rpwexpC == NULL) {
            validateSignature("std::vector<double>(*rpwexpC)(arma::mat,arma::rowvec)");
            p_rpwexpC = (Ptr_rpwexpC)R_GetCCallable("hesim", "hesim_rpwexpC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rpwexpC(Rcpp::wrap(rate), Rcpp::wrap(time));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

    inline double rsurv(double location, double anc1, std::string dist, double anc2 = 0.0) {
        typedef SEXP(*Ptr_rsurv)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_rsurv p_rsurv = NULL;
        if (p_rsurv == NULL) {
            validateSignature("double(*rsurv)(double,double,std::string,double)");
            p_rsurv = (Ptr_rsurv)R_GetCCallable("hesim", "hesim_rsurv");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rsurv(Rcpp::wrap(location), Rcpp::wrap(anc1), Rcpp::wrap(dist), Rcpp::wrap(anc2));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline int rcat1C(arma::rowvec probs) {
        typedef SEXP(*Ptr_rcat1C)(SEXP);
        static Ptr_rcat1C p_rcat1C = NULL;
        if (p_rcat1C == NULL) {
            validateSignature("int(*rcat1C)(arma::rowvec)");
            p_rcat1C = (Ptr_rcat1C)R_GetCCallable("hesim", "hesim_rcat1C");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcat1C(Rcpp::wrap(probs));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline arma::vec rcatC(arma::mat probs) {
        typedef SEXP(*Ptr_rcatC)(SEXP);
        static Ptr_rcatC p_rcatC = NULL;
        if (p_rcatC == NULL) {
            validateSignature("arma::vec(*rcatC)(arma::mat)");
            p_rcatC = (Ptr_rcatC)R_GetCCallable("hesim", "hesim_rcatC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcatC(Rcpp::wrap(probs));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::rowvec rdirichlet1C(arma::rowvec alpha) {
        typedef SEXP(*Ptr_rdirichlet1C)(SEXP);
        static Ptr_rdirichlet1C p_rdirichlet1C = NULL;
        if (p_rdirichlet1C == NULL) {
            validateSignature("arma::rowvec(*rdirichlet1C)(arma::rowvec)");
            p_rdirichlet1C = (Ptr_rdirichlet1C)R_GetCCallable("hesim", "hesim_rdirichlet1C");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rdirichlet1C(Rcpp::wrap(alpha));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::rowvec >(rcpp_result_gen);
    }

    inline arma::cube rdirichlet_matC(int n, arma::mat alpha) {
        typedef SEXP(*Ptr_rdirichlet_matC)(SEXP,SEXP);
        static Ptr_rdirichlet_matC p_rdirichlet_matC = NULL;
        if (p_rdirichlet_matC == NULL) {
            validateSignature("arma::cube(*rdirichlet_matC)(int,arma::mat)");
            p_rdirichlet_matC = (Ptr_rdirichlet_matC)R_GetCCallable("hesim", "hesim_rdirichlet_matC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rdirichlet_matC(Rcpp::wrap(n), Rcpp::wrap(alpha));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::cube >(rcpp_result_gen);
    }

}

#endif // RCPP_hesim_RCPPEXPORTS_H_GEN_
