// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_hesim_RCPPEXPORTS_H_GEN_
#define RCPP_hesim_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

namespace hesim {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("hesim", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("hesim", "_hesim_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in hesim");
            }
        }
    }

    inline std::vector<double> C_rgengamma_vec(int n, std::vector<double> mu, std::vector<double> sigma, std::vector<double> Q) {
        typedef SEXP(*Ptr_C_rgengamma_vec)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_C_rgengamma_vec p_C_rgengamma_vec = NULL;
        if (p_C_rgengamma_vec == NULL) {
            validateSignature("std::vector<double>(*C_rgengamma_vec)(int,std::vector<double>,std::vector<double>,std::vector<double>)");
            p_C_rgengamma_vec = (Ptr_C_rgengamma_vec)R_GetCCallable("hesim", "_hesim_C_rgengamma_vec");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_rgengamma_vec(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(mu)), Shield<SEXP>(Rcpp::wrap(sigma)), Shield<SEXP>(Rcpp::wrap(Q)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

    inline double rtruncnorm(double mean, double sd, double lower, double upper) {
        typedef SEXP(*Ptr_rtruncnorm)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_rtruncnorm p_rtruncnorm = NULL;
        if (p_rtruncnorm == NULL) {
            validateSignature("double(*rtruncnorm)(double,double,double,double)");
            p_rtruncnorm = (Ptr_rtruncnorm)R_GetCCallable("hesim", "_hesim_rtruncnorm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rtruncnorm(Shield<SEXP>(Rcpp::wrap(mean)), Shield<SEXP>(Rcpp::wrap(sd)), Shield<SEXP>(Rcpp::wrap(lower)), Shield<SEXP>(Rcpp::wrap(upper)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double rpwexp(arma::rowvec rate, arma::rowvec time) {
        typedef SEXP(*Ptr_rpwexp)(SEXP,SEXP);
        static Ptr_rpwexp p_rpwexp = NULL;
        if (p_rpwexp == NULL) {
            validateSignature("double(*rpwexp)(arma::rowvec,arma::rowvec)");
            p_rpwexp = (Ptr_rpwexp)R_GetCCallable("hesim", "_hesim_rpwexp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rpwexp(Shield<SEXP>(Rcpp::wrap(rate)), Shield<SEXP>(Rcpp::wrap(time)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline std::vector<double> C_rpwexp_vec(int n, arma::mat rate, arma::rowvec time) {
        typedef SEXP(*Ptr_C_rpwexp_vec)(SEXP,SEXP,SEXP);
        static Ptr_C_rpwexp_vec p_C_rpwexp_vec = NULL;
        if (p_C_rpwexp_vec == NULL) {
            validateSignature("std::vector<double>(*C_rpwexp_vec)(int,arma::mat,arma::rowvec)");
            p_C_rpwexp_vec = (Ptr_C_rpwexp_vec)R_GetCCallable("hesim", "_hesim_C_rpwexp_vec");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_rpwexp_vec(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(rate)), Shield<SEXP>(Rcpp::wrap(time)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

    inline int rcat(arma::rowvec probs) {
        typedef SEXP(*Ptr_rcat)(SEXP);
        static Ptr_rcat p_rcat = NULL;
        if (p_rcat == NULL) {
            validateSignature("int(*rcat)(arma::rowvec)");
            p_rcat = (Ptr_rcat)R_GetCCallable("hesim", "_hesim_rcat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rcat(Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline arma::vec C_rcat_vec(int n, arma::mat probs) {
        typedef SEXP(*Ptr_C_rcat_vec)(SEXP,SEXP);
        static Ptr_C_rcat_vec p_C_rcat_vec = NULL;
        if (p_C_rcat_vec == NULL) {
            validateSignature("arma::vec(*C_rcat_vec)(int,arma::mat)");
            p_C_rcat_vec = (Ptr_C_rcat_vec)R_GetCCallable("hesim", "_hesim_C_rcat_vec");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_rcat_vec(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(probs)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::rowvec rdirichlet(arma::rowvec alpha) {
        typedef SEXP(*Ptr_rdirichlet)(SEXP);
        static Ptr_rdirichlet p_rdirichlet = NULL;
        if (p_rdirichlet == NULL) {
            validateSignature("arma::rowvec(*rdirichlet)(arma::rowvec)");
            p_rdirichlet = (Ptr_rdirichlet)R_GetCCallable("hesim", "_hesim_rdirichlet");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rdirichlet(Shield<SEXP>(Rcpp::wrap(alpha)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::rowvec >(rcpp_result_gen);
    }

    inline arma::cube C_rdirichlet_mat(int n, arma::mat alpha) {
        typedef SEXP(*Ptr_C_rdirichlet_mat)(SEXP,SEXP);
        static Ptr_C_rdirichlet_mat p_C_rdirichlet_mat = NULL;
        if (p_C_rdirichlet_mat == NULL) {
            validateSignature("arma::cube(*C_rdirichlet_mat)(int,arma::mat)");
            p_C_rdirichlet_mat = (Ptr_C_rdirichlet_mat)R_GetCCallable("hesim", "_hesim_C_rdirichlet_mat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_C_rdirichlet_mat(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(alpha)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::cube >(rcpp_result_gen);
    }

}

#endif // RCPP_hesim_RCPPEXPORTS_H_GEN_
