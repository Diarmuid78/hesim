\docType{data}
\name{IndivCtstm}
\alias{IndivCtstm}

\title{Individual-level continuous time state transition model}
\format{\code{\link{R6Class}} object.}
\usage{
IndivCtstm
}
\description{
Simulate outcomes from an individual-level continuous time state transition model (CTSTM). The class is currently only valid for semi-Markov (i.e., "clock-reset") models; however,
functionality will soon be added for Markov  (i.e., "clock-forward") models.

}
\section{Fields}{

\describe{
\item{\code{trans_model}}{Model for health state transitions. Must be an object of class \code{\link{CtstmTrans}}.}

\item{\code{utility_model}}{The model used to predict utility by health state. Must be an object of class \code{\link{StateVals}}.}

\item{\code{cost_models}}{The models used to predict costs by health state. Must be a list of objects of class \code{\link{StateVals}}, where each element of the list represents a different cost category.}

\item{\code{disease_prog_}}{Disease progression simulated using \code{sim_disease}; that is, a tidy  \code{\link[data.table]{data.table}} containing simulated trajectories through the multi-state model. Columns include: 

\describe{
\item{sample}{A random sample from the PSA.}
\item{strategy_id}{The treatment strategy ID.}
\item{patient_id}{The patient ID.}
\item{from}{The health state ID transitioned from.}
\item{to}{The health state ID transitioned to.}
\item{final}{An indicator equal to 1 if a patient is in their final health state during the simulation and 0 otherwise.}
\item{time_start}{The time at the start of the interval.}
\item{time_start}{The time at the end of the interval.}
}
}

\item{\code{stateprobs_}}{A tidy \code{\link[data.table]{data.table}} of health state probabilities as a function of time simulated using \code{sim_stateprobs}. Columns include:

\describe{
\item{sample}{A random sample from the PSA.}
\item{strategy_id}{The treatment strategy ID.}
\item{state_id}{The health state ID.}
\item{t}{The time at which a state probability is computed.}
\item{prob}{The probability of being in a given health state.}
}

}

\item{\code{qalys_}}{A tidy \code{\link[data.table]{data.table}} of quality-adjusted life-years (QALYs) simulated using \code{sim_qalys}. Columns include:

\describe{
\item{sample}{A random sample from the PSA.}
\item{strategy_id}{The treatment strategy ID.}
\item{patient_id}{A patient ID.}
\item{dr}{The discount rate.}
\item{qalys}{Simulated QALYs.}
}

}

\item{\code{costs_}}{A tidy \code{\link[data.table]{data.table}} of costs by category simulated using \code{sim_costs}. Columns include:

\describe{
\item{sample}{A random sample from the PSA.}
\item{strategy_id}{The treatment strategy ID.}
\item{patient_id}{A patient ID.}
\item{dr}{The discount rate.}
\item{category}{The cost category.}
\item{costs}{Simulated costs.}
}

}

}}

\section{Methods}{

\describe{

\item{\code{new(trans_model, utility_model = NULL, cost_models = NULL)}}{

  Constructor for the class.
  
}
  
  \item{\code{sim_disease(max_t = 100, max_age = 100)}}{
    Simulate disease progression.
    
     \itemize{
     \item \code{max_t}: Maximum time to simulate disease until.
     \item \code{max_age}: Maximum age that a patient can live. Upon reaching this age the simulation stops and a patient moves to the "death state" specified by \code{death_state}.
     }
     
    The simulated output is stored in \code{disease_prog_}. 
  }
  
  \item{\code{sim_stateprobs(t)}}{
    Simulate the probability of being in each health state as a function of time.
    
     \itemize{
     \item \code{t}: A numeric vector of times.
     }
     
    The simulated output is stored in \code{stateprobs_}.  
  }
  
  \item{\code{sim_qalys(dr = .03, type = c("predict", "random")}}{
    Compute simulated (discounted) QALYs using the simulation output generated by \code{sim_disease}
    and stored in \code{disease_prog_} by patient and treatment strategy.
    
     \itemize{
     \item \code{dr}: Discount rate to apply to QALYs. May be a vector in which case QALYs are calculated for each element in \code{dr}.
     \item \code{type}: \code{predict} for mean values or \code{random} for random samples as in \code{$sim()} in \code{\link{StateVals}}.
     }
     
     The simulated output is stored in \code{qalys_}.
  } 
  
  \item{\code{sim_costs(dr = .03, type = c("predict", "random")}}{
    Compute simulated (discounted) costs using the simulation output generated by \code{sim_disease}
    and stored in \code{disease_prog_} by patient and treatment strategy.
    
     \itemize{
     \item \code{dr}: Discount rate to apply to costs. May be a vector in which case costs are calculated for each element in \code{dr}.
      \item \code{type}: \code{predict} for mean values or \code{random} for random samples as in \code{$sim()} in \code{\link{StateVals}}.
     
     }
     
    The simulated output is stored in \code{costs_}. 
  },
  
  \item{\code{summarize(stat = mean)}}{
    Summarize costs and QALYs to produce a summary measure of costs and health outcomes across all patients by treatment strategy.
    
     \itemize{
     \item \code{stat}: The statistic used to summarize costs and QALYs. The default is the mean but any R function can be passed to \code{stat}.
     }
     
     Returns an object of summary cost-effectiveness output of class \code{\link{ce}}. 
  }    
  

}

}

\seealso{
\code{\link{create_CtstmTrans}}, \code{\link{CtstmTrans}}
}


\examples{
library("flexsurv")

# Treatment strategies,target population, and health states
dt_strategies <- data.frame(strategy_id = c(1, 2, 3))
dt_patients <- data.frame(patient_id = seq(1, 3),
                          age = c(45, 50, 60),
                          female = c(0, 0, 1))
dt_states <- data.frame(state_id = c(1, 2))

# Parameter estimation
n_samples <- 3

## Multi-state model
fits <- vector(length = 3, mode = "list")
surv_dat <- data.frame(ctstm3_exdata$transitions)
for (i in 1:length(fits)){
  fits[[i]] <- flexsurvreg(Surv(years, status) ~ strategy_id, 
                           data = surv_dat,
                           subset = (trans == i),
                           dist = "weibull")
}
fits <- flexsurvreg_list(fits)
tmat <- rbind(c(NA, 1, 2),
              c(NA, NA, 3),
              c(NA, NA, NA))
              
## Utility
beta_params <- mom_beta(ctstm3_exdata$utility$mean, ctstm3_exdata$utility$se)
utility1 <- rbeta(n_samples, shape1 = beta_params$shape1[1], 
                  shape2 = beta_params$shape2[1])
utility2 <- rbeta(n_samples, shape1 = beta_params$shape1[2], 
                  shape2 = beta_params$shape2[2])
utility_params <- params_lm(coefs  = cbind(utility1, utility2))

# Costs
drugcost_params <- params_lm(matrix(rep(ctstm3_exdata$costs$drugs$costs, n_samples), 
                             nrow = n_samples, byrow = TRUE))

# Decision model
hesim_dat <- hesim_data(strategies = dt_strategies,
                        patients = dt_patients,
                        states = dt_states)
                        
## Create transition model (i.e., multi-state model)
transmod_data <- expand_hesim_data(hesim_dat)
transmod <- create_CtstmTrans(fits, data = transmod_data, trans_mat = tmat,
                              n = n_samples)
                        
## Create costs and utility models
statevals_edata <- expand_hesim_data(hesim_dat, by = c("strategies", "patients",
                                                       "states"))
input_dat <- create_input_data(formula_list(mu = ~ -1 + factor(state_id)), 
                               data = statevals_edata)
utilmod <- StateVals$new(data = input_dat, params = utility_params)
drugcostmod <- StateVals$new(data = input_dat, params = drugcost_params)

## Simulate outcomes
ictstm <- IndivCtstm$new(trans_model = transmod,
                         utility_model = utilmod,
                         cost_models = list(drugs = drugcostmod))
head(ictstm$sim_disease()$disease_prog_)
head(ictstm$sim_stateprobs(t = c(0, 5, 10))$stateprobs_[t == 5])
ictstm$sim_qalys(dr = .03)
ictstm$sim_costs(dr = .03)
head(ictstm$summarize())
}