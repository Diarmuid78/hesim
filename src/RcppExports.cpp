// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/hesim.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// C_incr_effect
std::vector<double> C_incr_effect(std::vector<double> x, std::vector<double> y, int n_samples, int n_strategies, int n_grps);
RcppExport SEXP _hesim_C_incr_effect(SEXP xSEXP, SEXP ySEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_grpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_grps(n_grpsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_incr_effect(x, y, n_samples, n_strategies, n_grps));
    return rcpp_result_gen;
END_RCPP
}
// C_ceac
std::vector<double> C_ceac(std::vector<double> k, std::vector<double> ie, std::vector<double> ic, int n_samples, int n_strategies, int n_grps);
RcppExport SEXP _hesim_C_ceac(SEXP kSEXP, SEXP ieSEXP, SEXP icSEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_grpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ie(ieSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ic(icSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_grps(n_grpsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ceac(k, ie, ic, n_samples, n_strategies, n_grps));
    return rcpp_result_gen;
END_RCPP
}
// C_mce
std::vector<double> C_mce(std::vector<double> k, std::vector<double> e, std::vector<double> c, int n_samples, int n_strategies, int n_grps);
RcppExport SEXP _hesim_C_mce(SEXP kSEXP, SEXP eSEXP, SEXP cSEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_grpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type e(eSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_grps(n_grpsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_mce(k, e, c, n_samples, n_strategies, n_grps));
    return rcpp_result_gen;
END_RCPP
}
// C_enmbpi
std::vector<double> C_enmbpi(std::vector<double> k, std::vector<double> e, std::vector<double> c, int n_samples, int n_strategies, int n_grps);
RcppExport SEXP _hesim_C_enmbpi(SEXP kSEXP, SEXP eSEXP, SEXP cSEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_grpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type e(eSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_grps(n_grpsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_enmbpi(k, e, c, n_samples, n_strategies, n_grps));
    return rcpp_result_gen;
END_RCPP
}
// tmax_max
int tmax_max(arma::mat m);
RcppExport SEXP _hesim_tmax_max(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(tmax_max(m));
    return rcpp_result_gen;
END_RCPP
}
// C_ctstm_summary
Rcpp::DataFrame C_ctstm_summary(Rcpp::Environment R_CtstmTrans, std::vector<double> t, std::string type);
RcppExport SEXP _hesim_C_ctstm_summary(SEXP R_CtstmTransSEXP, SEXP tSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_CtstmTrans(R_CtstmTransSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type t(tSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ctstm_summary(R_CtstmTrans, t, type));
    return rcpp_result_gen;
END_RCPP
}
// C_rgengamma
std::vector<double> C_rgengamma(int n, std::vector<double> mu, std::vector<double> sigma, std::vector<double> Q);
RcppExport SEXP _hesim_C_rgengamma(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rgengamma(n, mu, sigma, Q));
    return rcpp_result_gen;
END_RCPP
}
// C_rpwexp
std::vector<double> C_rpwexp(int n, arma::mat rate, arma::rowvec time);
RcppExport SEXP _hesim_C_rpwexp(SEXP nSEXP, SEXP rateSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rpwexp(n, rate, time));
    return rcpp_result_gen;
END_RCPP
}
// C_rcat
std::vector<double> C_rcat(int n, arma::mat probs);
RcppExport SEXP _hesim_C_rcat(SEXP nSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rcat(n, probs));
    return rcpp_result_gen;
END_RCPP
}
// C_rdirichlet_mat
arma::cube C_rdirichlet_mat(int n, arma::mat alpha);
RcppExport SEXP _hesim_C_rdirichlet_mat(SEXP nSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rdirichlet_mat(n, alpha));
    return rcpp_result_gen;
END_RCPP
}
// C_ctstm_sim_disease
Rcpp::DataFrame C_ctstm_sim_disease(Rcpp::Environment R_CtstmTrans, int start_state, std::vector<int> start_ages, int death_state, double max_t, double max_age);
RcppExport SEXP _hesim_C_ctstm_sim_disease(SEXP R_CtstmTransSEXP, SEXP start_stateSEXP, SEXP start_agesSEXP, SEXP death_stateSEXP, SEXP max_tSEXP, SEXP max_ageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_CtstmTrans(R_CtstmTransSEXP);
    Rcpp::traits::input_parameter< int >::type start_state(start_stateSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type start_ages(start_agesSEXP);
    Rcpp::traits::input_parameter< int >::type death_state(death_stateSEXP);
    Rcpp::traits::input_parameter< double >::type max_t(max_tSEXP);
    Rcpp::traits::input_parameter< double >::type max_age(max_ageSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ctstm_sim_disease(R_CtstmTrans, start_state, start_ages, death_state, max_t, max_age));
    return rcpp_result_gen;
END_RCPP
}
// C_ctstm_indiv_stateprobs
Rcpp::DataFrame C_ctstm_indiv_stateprobs(Rcpp::DataFrame R_disease_prog, std::vector<double> t, int n_samples, int n_strategies, int n_states, int n_patients, int n_lines);
RcppExport SEXP _hesim_C_ctstm_indiv_stateprobs(SEXP R_disease_progSEXP, SEXP tSEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_statesSEXP, SEXP n_patientsSEXP, SEXP n_linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type R_disease_prog(R_disease_progSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_states(n_statesSEXP);
    Rcpp::traits::input_parameter< int >::type n_patients(n_patientsSEXP);
    Rcpp::traits::input_parameter< int >::type n_lines(n_linesSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ctstm_indiv_stateprobs(R_disease_prog, t, n_samples, n_strategies, n_states, n_patients, n_lines));
    return rcpp_result_gen;
END_RCPP
}
// C_indiv_ctstm_wlos
std::vector<double> C_indiv_ctstm_wlos(Rcpp::DataFrame R_disease_prog, Rcpp::Environment R_StateVal, double dr, std::string type);
RcppExport SEXP _hesim_C_indiv_ctstm_wlos(SEXP R_disease_progSEXP, SEXP R_StateValSEXP, SEXP drSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type R_disease_prog(R_disease_progSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_StateVal(R_StateValSEXP);
    Rcpp::traits::input_parameter< double >::type dr(drSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_indiv_ctstm_wlos(R_disease_prog, R_StateVal, dr, type));
    return rcpp_result_gen;
END_RCPP
}
// C_psm_curves_summary
Rcpp::DataFrame C_psm_curves_summary(Rcpp::Environment R_PsmCurves, std::vector<double> x, std::string type, double dr);
RcppExport SEXP _hesim_C_psm_curves_summary(SEXP R_PsmCurvesSEXP, SEXP xSEXP, SEXP typeSEXP, SEXP drSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_PsmCurves(R_PsmCurvesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type dr(drSEXP);
    rcpp_result_gen = Rcpp::wrap(C_psm_curves_summary(R_PsmCurves, x, type, dr));
    return rcpp_result_gen;
END_RCPP
}
// C_psm_sim_stateprobs
Rcpp::List C_psm_sim_stateprobs(Rcpp::Environment R_Psm);
RcppExport SEXP _hesim_C_psm_sim_stateprobs(SEXP R_PsmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_Psm(R_PsmSEXP);
    rcpp_result_gen = Rcpp::wrap(C_psm_sim_stateprobs(R_Psm));
    return rcpp_result_gen;
END_RCPP
}
// C_psm_sim_wlos
Rcpp::DataFrame C_psm_sim_wlos(Rcpp::Environment R_Psm, Rcpp::DataFrame R_stateprobs, std::vector<double> dr, std::string type, std::vector<std::string> categories);
RcppExport SEXP _hesim_C_psm_sim_wlos(SEXP R_PsmSEXP, SEXP R_stateprobsSEXP, SEXP drSEXP, SEXP typeSEXP, SEXP categoriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_Psm(R_PsmSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type R_stateprobs(R_stateprobsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dr(drSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type categories(categoriesSEXP);
    rcpp_result_gen = Rcpp::wrap(C_psm_sim_wlos(R_Psm, R_stateprobs, dr, type, categories));
    return rcpp_result_gen;
END_RCPP
}
// C_statevals_sim
Rcpp::DataFrame C_statevals_sim(Rcpp::Environment R_StateVals, std::vector<double> times, std::string type);
RcppExport SEXP _hesim_C_statevals_sim(SEXP R_StateValsSEXP, SEXP timesSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_StateVals(R_StateValsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_statevals_sim(R_StateVals, times, type));
    return rcpp_result_gen;
END_RCPP
}
// C_test_trapz
double C_test_trapz(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _hesim_C_test_trapz(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_trapz(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_test_is_absorbing
std::vector<bool> C_test_is_absorbing(arma::mat m);
RcppExport SEXP _hesim_C_test_is_absorbing(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_is_absorbing(m));
    return rcpp_result_gen;
END_RCPP
}
// C_test_trans_mat_trans_id
std::vector<int> C_test_trans_mat_trans_id(arma::mat m, int from_state);
RcppExport SEXP _hesim_C_test_trans_mat_trans_id(SEXP mSEXP, SEXP from_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type from_state(from_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_trans_mat_trans_id(m, from_state));
    return rcpp_result_gen;
END_RCPP
}
// C_test_trans_mat_to
std::vector<int> C_test_trans_mat_to(arma::mat m, int from_state);
RcppExport SEXP _hesim_C_test_trans_mat_to(SEXP mSEXP, SEXP from_stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type from_state(from_stateSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_trans_mat_to(m, from_state));
    return rcpp_result_gen;
END_RCPP
}
// C_test_trans_mat_n_trans
int C_test_trans_mat_n_trans(arma::mat m);
RcppExport SEXP _hesim_C_test_trans_mat_n_trans(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_trans_mat_n_trans(m));
    return rcpp_result_gen;
END_RCPP
}
// C_test_exponential
double C_test_exponential(double rate, std::string fun, double x);
RcppExport SEXP _hesim_C_test_exponential(SEXP rateSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_exponential(rate, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_weibull
double C_test_weibull(double shape, double scale, std::string fun, double x);
RcppExport SEXP _hesim_C_test_weibull(SEXP shapeSEXP, SEXP scaleSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_weibull(shape, scale, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_weibull_nma
double C_test_weibull_nma(double a0, double a1, std::string fun, double x);
RcppExport SEXP _hesim_C_test_weibull_nma(SEXP a0SEXP, SEXP a1SEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_weibull_nma(a0, a1, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_gamma
double C_test_gamma(double shape, double rate, std::string fun, double x);
RcppExport SEXP _hesim_C_test_gamma(SEXP shapeSEXP, SEXP rateSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_gamma(shape, rate, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_lognormal
double C_test_lognormal(double meanlog, double sdlog, std::string fun, double x);
RcppExport SEXP _hesim_C_test_lognormal(SEXP meanlogSEXP, SEXP sdlogSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type meanlog(meanlogSEXP);
    Rcpp::traits::input_parameter< double >::type sdlog(sdlogSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_lognormal(meanlog, sdlog, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_gompertz
double C_test_gompertz(double shape, double rate, std::string fun, double x);
RcppExport SEXP _hesim_C_test_gompertz(SEXP shapeSEXP, SEXP rateSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_gompertz(shape, rate, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_loglogistic
double C_test_loglogistic(double shape, double scale, std::string fun, double x);
RcppExport SEXP _hesim_C_test_loglogistic(SEXP shapeSEXP, SEXP scaleSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_loglogistic(shape, scale, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_gengamma
double C_test_gengamma(double mu, double sigma, double Q, std::string fun, double x);
RcppExport SEXP _hesim_C_test_gengamma(SEXP muSEXP, SEXP sigmaSEXP, SEXP QSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type Q(QSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_gengamma(mu, sigma, Q, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_survspline
double C_test_survspline(std::vector<double> gamma, std::vector<double> knots, std::string scale, std::string timescale, std::string fun, double x);
RcppExport SEXP _hesim_C_test_survspline(SEXP gammaSEXP, SEXP knotsSEXP, SEXP scaleSEXP, SEXP timescaleSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< std::string >::type timescale(timescaleSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_survspline(gamma, knots, scale, timescale, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_fracpoly
double C_test_fracpoly(std::vector<double> gamma, std::vector<double> powers, std::string fun, double x);
RcppExport SEXP _hesim_C_test_fracpoly(SEXP gammaSEXP, SEXP powersSEXP, SEXP funSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type powers(powersSEXP);
    Rcpp::traits::input_parameter< std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_fracpoly(gamma, powers, fun, x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_rtruncnorm
double C_test_rtruncnorm(double mean, double sd, double lower, double upper);
RcppExport SEXP _hesim_C_test_rtruncnorm(SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_rtruncnorm(mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// C_test_xptr_test_time_fun
SEXP C_test_xptr_test_time_fun(Rcpp::List L);
RcppExport SEXP _hesim_C_test_xptr_test_time_fun(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_xptr_test_time_fun(L));
    return rcpp_result_gen;
END_RCPP
}
// C_test_obs_index
int C_test_obs_index(Rcpp::List R_input_data, int strategy_id, int patient_id, int line, int health_id);
RcppExport SEXP _hesim_C_test_obs_index(SEXP R_input_dataSEXP, SEXP strategy_idSEXP, SEXP patient_idSEXP, SEXP lineSEXP, SEXP health_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type R_input_data(R_input_dataSEXP);
    Rcpp::traits::input_parameter< int >::type strategy_id(strategy_idSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< int >::type line(lineSEXP);
    Rcpp::traits::input_parameter< int >::type health_id(health_idSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_obs_index(R_input_data, strategy_id, patient_id, line, health_id));
    return rcpp_result_gen;
END_RCPP
}
// C_test_obs_ids
std::vector<int> C_test_obs_ids(Rcpp::List R_input_data, std::string member);
RcppExport SEXP _hesim_C_test_obs_ids(SEXP R_input_dataSEXP, SEXP memberSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type R_input_data(R_input_dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type member(memberSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_obs_ids(R_input_data, member));
    return rcpp_result_gen;
END_RCPP
}
// test_quad_functor
double test_quad_functor(double lower, double upper);
RcppExport SEXP _hesim_test_quad_functor(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(test_quad_functor(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// test_quad_lambda
double test_quad_lambda(double lower, double upper);
RcppExport SEXP _hesim_test_quad_lambda(SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(test_quad_lambda(lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// C_test_add_constant_int
std::vector<int> C_test_add_constant_int(std::vector<int> v, double value);
RcppExport SEXP _hesim_C_test_add_constant_int(SEXP vSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_add_constant_int(v, value));
    return rcpp_result_gen;
END_RCPP
}
// C_test_add_constant_double
std::vector<double> C_test_add_constant_double(std::vector<double> v, double value);
RcppExport SEXP _hesim_C_test_add_constant_double(SEXP vSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_add_constant_double(v, value));
    return rcpp_result_gen;
END_RCPP
}
// C_test_pv
double C_test_pv(double z, double r, double t1, double t2);
RcppExport SEXP _hesim_C_test_pv(SEXP zSEXP, SEXP rSEXP, SEXP t1SEXP, SEXP t2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_pv(z, r, t1, t2));
    return rcpp_result_gen;
END_RCPP
}
// test_zeroin
double test_zeroin();
RcppExport SEXP _hesim_test_zeroin() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_zeroin());
    return rcpp_result_gen;
END_RCPP
}
// C_rowmax
arma::colvec C_rowmax(arma::mat x);
RcppExport SEXP _hesim_C_rowmax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rowmax(x));
    return rcpp_result_gen;
END_RCPP
}
// C_rowmax_index
arma::ucolvec C_rowmax_index(arma::mat x);
RcppExport SEXP _hesim_C_rowmax_index(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rowmax_index(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hesim_C_incr_effect", (DL_FUNC) &_hesim_C_incr_effect, 5},
    {"_hesim_C_ceac", (DL_FUNC) &_hesim_C_ceac, 6},
    {"_hesim_C_mce", (DL_FUNC) &_hesim_C_mce, 6},
    {"_hesim_C_enmbpi", (DL_FUNC) &_hesim_C_enmbpi, 6},
    {"_hesim_tmax_max", (DL_FUNC) &_hesim_tmax_max, 1},
    {"_hesim_C_ctstm_summary", (DL_FUNC) &_hesim_C_ctstm_summary, 3},
    {"_hesim_C_rgengamma", (DL_FUNC) &_hesim_C_rgengamma, 4},
    {"_hesim_C_rpwexp", (DL_FUNC) &_hesim_C_rpwexp, 3},
    {"_hesim_C_rcat", (DL_FUNC) &_hesim_C_rcat, 2},
    {"_hesim_C_rdirichlet_mat", (DL_FUNC) &_hesim_C_rdirichlet_mat, 2},
    {"_hesim_C_ctstm_sim_disease", (DL_FUNC) &_hesim_C_ctstm_sim_disease, 6},
    {"_hesim_C_ctstm_indiv_stateprobs", (DL_FUNC) &_hesim_C_ctstm_indiv_stateprobs, 7},
    {"_hesim_C_indiv_ctstm_wlos", (DL_FUNC) &_hesim_C_indiv_ctstm_wlos, 4},
    {"_hesim_C_psm_curves_summary", (DL_FUNC) &_hesim_C_psm_curves_summary, 4},
    {"_hesim_C_psm_sim_stateprobs", (DL_FUNC) &_hesim_C_psm_sim_stateprobs, 1},
    {"_hesim_C_psm_sim_wlos", (DL_FUNC) &_hesim_C_psm_sim_wlos, 5},
    {"_hesim_C_statevals_sim", (DL_FUNC) &_hesim_C_statevals_sim, 3},
    {"_hesim_C_test_trapz", (DL_FUNC) &_hesim_C_test_trapz, 2},
    {"_hesim_C_test_is_absorbing", (DL_FUNC) &_hesim_C_test_is_absorbing, 1},
    {"_hesim_C_test_trans_mat_trans_id", (DL_FUNC) &_hesim_C_test_trans_mat_trans_id, 2},
    {"_hesim_C_test_trans_mat_to", (DL_FUNC) &_hesim_C_test_trans_mat_to, 2},
    {"_hesim_C_test_trans_mat_n_trans", (DL_FUNC) &_hesim_C_test_trans_mat_n_trans, 1},
    {"_hesim_C_test_exponential", (DL_FUNC) &_hesim_C_test_exponential, 3},
    {"_hesim_C_test_weibull", (DL_FUNC) &_hesim_C_test_weibull, 4},
    {"_hesim_C_test_weibull_nma", (DL_FUNC) &_hesim_C_test_weibull_nma, 4},
    {"_hesim_C_test_gamma", (DL_FUNC) &_hesim_C_test_gamma, 4},
    {"_hesim_C_test_lognormal", (DL_FUNC) &_hesim_C_test_lognormal, 4},
    {"_hesim_C_test_gompertz", (DL_FUNC) &_hesim_C_test_gompertz, 4},
    {"_hesim_C_test_loglogistic", (DL_FUNC) &_hesim_C_test_loglogistic, 4},
    {"_hesim_C_test_gengamma", (DL_FUNC) &_hesim_C_test_gengamma, 5},
    {"_hesim_C_test_survspline", (DL_FUNC) &_hesim_C_test_survspline, 6},
    {"_hesim_C_test_fracpoly", (DL_FUNC) &_hesim_C_test_fracpoly, 4},
    {"_hesim_C_test_rtruncnorm", (DL_FUNC) &_hesim_C_test_rtruncnorm, 4},
    {"_hesim_C_test_xptr_test_time_fun", (DL_FUNC) &_hesim_C_test_xptr_test_time_fun, 1},
    {"_hesim_C_test_obs_index", (DL_FUNC) &_hesim_C_test_obs_index, 5},
    {"_hesim_C_test_obs_ids", (DL_FUNC) &_hesim_C_test_obs_ids, 2},
    {"_hesim_test_quad_functor", (DL_FUNC) &_hesim_test_quad_functor, 2},
    {"_hesim_test_quad_lambda", (DL_FUNC) &_hesim_test_quad_lambda, 2},
    {"_hesim_C_test_add_constant_int", (DL_FUNC) &_hesim_C_test_add_constant_int, 2},
    {"_hesim_C_test_add_constant_double", (DL_FUNC) &_hesim_C_test_add_constant_double, 2},
    {"_hesim_C_test_pv", (DL_FUNC) &_hesim_C_test_pv, 4},
    {"_hesim_test_zeroin", (DL_FUNC) &_hesim_test_zeroin, 0},
    {"_hesim_C_rowmax", (DL_FUNC) &_hesim_C_rowmax, 1},
    {"_hesim_C_rowmax_index", (DL_FUNC) &_hesim_C_rowmax_index, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_hesim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
