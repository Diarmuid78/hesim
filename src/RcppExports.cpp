// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/hesim.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// C_incr_effect
std::vector<double> C_incr_effect(std::vector<double> x, std::vector<double> y, int n_samples, int n_strategies, int n_grps);
RcppExport SEXP _hesim_C_incr_effect(SEXP xSEXP, SEXP ySEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_grpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_grps(n_grpsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_incr_effect(x, y, n_samples, n_strategies, n_grps));
    return rcpp_result_gen;
END_RCPP
}
// C_ceac
std::vector<double> C_ceac(std::vector<double> k, std::vector<double> ie, std::vector<double> ic, int n_samples, int n_strategies, int n_grps);
RcppExport SEXP _hesim_C_ceac(SEXP kSEXP, SEXP ieSEXP, SEXP icSEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_grpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ie(ieSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ic(icSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_grps(n_grpsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ceac(k, ie, ic, n_samples, n_strategies, n_grps));
    return rcpp_result_gen;
END_RCPP
}
// C_mce
std::vector<double> C_mce(std::vector<double> k, std::vector<double> e, std::vector<double> c, int n_samples, int n_strategies, int n_grps);
RcppExport SEXP _hesim_C_mce(SEXP kSEXP, SEXP eSEXP, SEXP cSEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_grpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type e(eSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_grps(n_grpsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_mce(k, e, c, n_samples, n_strategies, n_grps));
    return rcpp_result_gen;
END_RCPP
}
// C_enmbpi
std::vector<double> C_enmbpi(std::vector<double> k, std::vector<double> e, std::vector<double> c, int n_samples, int n_strategies, int n_grps);
RcppExport SEXP _hesim_C_enmbpi(SEXP kSEXP, SEXP eSEXP, SEXP cSEXP, SEXP n_samplesSEXP, SEXP n_strategiesSEXP, SEXP n_grpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type k(kSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type e(eSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_strategies(n_strategiesSEXP);
    Rcpp::traits::input_parameter< int >::type n_grps(n_grpsSEXP);
    rcpp_result_gen = Rcpp::wrap(C_enmbpi(k, e, c, n_samples, n_strategies, n_grps));
    return rcpp_result_gen;
END_RCPP
}
// C_rgengamma_vec
std::vector<double> C_rgengamma_vec(int n, std::vector<double> mu, std::vector<double> sigma, std::vector<double> Q);
static SEXP _hesim_C_rgengamma_vec_try(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rgengamma_vec(n, mu, sigma, Q));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hesim_C_rgengamma_vec(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP QSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hesim_C_rgengamma_vec_try(nSEXP, muSEXP, sigmaSEXP, QSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rtruncnorm
double rtruncnorm(double mean, double sd, double lower, double upper);
static SEXP _hesim_rtruncnorm_try(SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnorm(mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hesim_rtruncnorm(SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hesim_rtruncnorm_try(meanSEXP, sdSEXP, lowerSEXP, upperSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rpwexp
double rpwexp(arma::rowvec rate, arma::rowvec time);
static SEXP _hesim_rpwexp_try(SEXP rateSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(rpwexp(rate, time));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hesim_rpwexp(SEXP rateSEXP, SEXP timeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hesim_rpwexp_try(rateSEXP, timeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rpwexp_vec
std::vector<double> rpwexp_vec(int n, arma::mat rate, arma::rowvec time);
static SEXP _hesim_rpwexp_vec_try(SEXP nSEXP, SEXP rateSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(rpwexp_vec(n, rate, time));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hesim_rpwexp_vec(SEXP nSEXP, SEXP rateSEXP, SEXP timeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hesim_rpwexp_vec_try(nSEXP, rateSEXP, timeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rcat
int rcat(arma::rowvec probs);
static SEXP _hesim_rcat_try(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcat(probs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hesim_rcat(SEXP probsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hesim_rcat_try(probsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rcat_vec
arma::vec rcat_vec(int n, arma::mat probs);
static SEXP _hesim_rcat_vec_try(SEXP nSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcat_vec(n, probs));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hesim_rcat_vec(SEXP nSEXP, SEXP probsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hesim_rcat_vec_try(nSEXP, probsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rdirichlet
arma::rowvec rdirichlet(arma::rowvec alpha);
static SEXP _hesim_rdirichlet_try(SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet(alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hesim_rdirichlet(SEXP alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hesim_rdirichlet_try(alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rdirichlet_mat
arma::cube rdirichlet_mat(int n, arma::mat alpha);
static SEXP _hesim_rdirichlet_mat_try(SEXP nSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(rdirichlet_mat(n, alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _hesim_rdirichlet_mat(SEXP nSEXP, SEXP alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_hesim_rdirichlet_mat_try(nSEXP, alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// C_test_trapzfun
double C_test_trapzfun(std::vector<double> x);
RcppExport SEXP _hesim_C_test_trapzfun(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_trapzfun(x));
    return rcpp_result_gen;
END_RCPP
}
// C_test_trapz
double C_test_trapz(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _hesim_C_test_trapz(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_trapz(x, y));
    return rcpp_result_gen;
END_RCPP
}
// C_test_cumtrapzfun
std::vector<double> C_test_cumtrapzfun(std::vector<double> t);
RcppExport SEXP _hesim_C_test_cumtrapzfun(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_cumtrapzfun(t));
    return rcpp_result_gen;
END_RCPP
}
// C_test_simpsfun
double C_test_simpsfun(std::vector<double> t);
RcppExport SEXP _hesim_C_test_simpsfun(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_simpsfun(t));
    return rcpp_result_gen;
END_RCPP
}
// C_test_cumsimpsfun
std::vector<double> C_test_cumsimpsfun(std::vector<double> t);
RcppExport SEXP _hesim_C_test_cumsimpsfun(SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_cumsimpsfun(t));
    return rcpp_result_gen;
END_RCPP
}
// C_psm_curves_summary
Rcpp::DataFrame C_psm_curves_summary(Rcpp::Environment R_PartSurvCurves, std::vector<double> x, std::string type, double dr);
RcppExport SEXP _hesim_C_psm_curves_summary(SEXP R_PartSurvCurvesSEXP, SEXP xSEXP, SEXP typeSEXP, SEXP drSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_PartSurvCurves(R_PartSurvCurvesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type dr(drSEXP);
    rcpp_result_gen = Rcpp::wrap(C_psm_curves_summary(R_PartSurvCurves, x, type, dr));
    return rcpp_result_gen;
END_RCPP
}
// C_psm_sim_stateprobs
Rcpp::List C_psm_sim_stateprobs(Rcpp::Environment R_PartSurv);
RcppExport SEXP _hesim_C_psm_sim_stateprobs(SEXP R_PartSurvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_PartSurv(R_PartSurvSEXP);
    rcpp_result_gen = Rcpp::wrap(C_psm_sim_stateprobs(R_PartSurv));
    return rcpp_result_gen;
END_RCPP
}
// C_psm_sim_wlos
Rcpp::DataFrame C_psm_sim_wlos(Rcpp::Environment R_psm, Rcpp::DataFrame R_stateprobs, std::vector<double> dr, std::string type, std::vector<std::string> categories);
RcppExport SEXP _hesim_C_psm_sim_wlos(SEXP R_psmSEXP, SEXP R_stateprobsSEXP, SEXP drSEXP, SEXP typeSEXP, SEXP categoriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_psm(R_psmSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type R_stateprobs(R_stateprobsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type dr(drSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type categories(categoriesSEXP);
    rcpp_result_gen = Rcpp::wrap(C_psm_sim_wlos(R_psm, R_stateprobs, dr, type, categories));
    return rcpp_result_gen;
END_RCPP
}
// C_statevals_sim
Rcpp::DataFrame C_statevals_sim(Rcpp::Environment R_StateVals, std::vector<double> times, std::string type);
RcppExport SEXP _hesim_C_statevals_sim(SEXP R_StateValsSEXP, SEXP timesSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type R_StateVals(R_StateValsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_statevals_sim(R_StateVals, times, type));
    return rcpp_result_gen;
END_RCPP
}
// C_test_xptr_test_time_fun
SEXP C_test_xptr_test_time_fun(Rcpp::List L);
RcppExport SEXP _hesim_C_test_xptr_test_time_fun(SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_xptr_test_time_fun(L));
    return rcpp_result_gen;
END_RCPP
}
// C_test_obs_index
int C_test_obs_index(Rcpp::List R_input_data, int strategy_id, int patient_id, int line, int health_id);
RcppExport SEXP _hesim_C_test_obs_index(SEXP R_input_dataSEXP, SEXP strategy_idSEXP, SEXP patient_idSEXP, SEXP lineSEXP, SEXP health_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type R_input_data(R_input_dataSEXP);
    Rcpp::traits::input_parameter< int >::type strategy_id(strategy_idSEXP);
    Rcpp::traits::input_parameter< int >::type patient_id(patient_idSEXP);
    Rcpp::traits::input_parameter< int >::type line(lineSEXP);
    Rcpp::traits::input_parameter< int >::type health_id(health_idSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_obs_index(R_input_data, strategy_id, patient_id, line, health_id));
    return rcpp_result_gen;
END_RCPP
}
// C_test_add_constant_int
std::vector<int> C_test_add_constant_int(std::vector<int> v, double value);
RcppExport SEXP _hesim_C_test_add_constant_int(SEXP vSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_add_constant_int(v, value));
    return rcpp_result_gen;
END_RCPP
}
// C_test_add_constant_double
std::vector<double> C_test_add_constant_double(std::vector<double> v, double value);
RcppExport SEXP _hesim_C_test_add_constant_double(SEXP vSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(C_test_add_constant_double(v, value));
    return rcpp_result_gen;
END_RCPP
}
// C_rowmax
arma::colvec C_rowmax(arma::mat x);
RcppExport SEXP _hesim_C_rowmax(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rowmax(x));
    return rcpp_result_gen;
END_RCPP
}
// C_rowmax_index
arma::ucolvec C_rowmax_index(arma::mat x);
RcppExport SEXP _hesim_C_rowmax_index(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_rowmax_index(x));
    return rcpp_result_gen;
END_RCPP
}
// test_zeroin
double test_zeroin();
RcppExport SEXP _hesim_test_zeroin() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_zeroin());
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _hesim_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("std::vector<double>(*C_rgengamma_vec)(int,std::vector<double>,std::vector<double>,std::vector<double>)");
        signatures.insert("double(*rtruncnorm)(double,double,double,double)");
        signatures.insert("double(*rpwexp)(arma::rowvec,arma::rowvec)");
        signatures.insert("std::vector<double>(*C_rpwexp_vec)(int,arma::mat,arma::rowvec)");
        signatures.insert("int(*rcat)(arma::rowvec)");
        signatures.insert("arma::vec(*C_rcat_vec)(int,arma::mat)");
        signatures.insert("arma::rowvec(*rdirichlet)(arma::rowvec)");
        signatures.insert("arma::cube(*C_rdirichlet_mat)(int,arma::mat)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _hesim_RcppExport_registerCCallable() { 
    R_RegisterCCallable("hesim", "_hesim_C_rgengamma_vec", (DL_FUNC)_hesim_C_rgengamma_vec_try);
    R_RegisterCCallable("hesim", "_hesim_rtruncnorm", (DL_FUNC)_hesim_rtruncnorm_try);
    R_RegisterCCallable("hesim", "_hesim_rpwexp", (DL_FUNC)_hesim_rpwexp_try);
    R_RegisterCCallable("hesim", "_hesim_C_rpwexp_vec", (DL_FUNC)_hesim_rpwexp_vec_try);
    R_RegisterCCallable("hesim", "_hesim_rcat", (DL_FUNC)_hesim_rcat_try);
    R_RegisterCCallable("hesim", "_hesim_C_rcat_vec", (DL_FUNC)_hesim_rcat_vec_try);
    R_RegisterCCallable("hesim", "_hesim_rdirichlet", (DL_FUNC)_hesim_rdirichlet_try);
    R_RegisterCCallable("hesim", "_hesim_C_rdirichlet_mat", (DL_FUNC)_hesim_rdirichlet_mat_try);
    R_RegisterCCallable("hesim", "_hesim_RcppExport_validate", (DL_FUNC)_hesim_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP _rcpp_module_boot_distributions();

static const R_CallMethodDef CallEntries[] = {
    {"_hesim_C_incr_effect", (DL_FUNC) &_hesim_C_incr_effect, 5},
    {"_hesim_C_ceac", (DL_FUNC) &_hesim_C_ceac, 6},
    {"_hesim_C_mce", (DL_FUNC) &_hesim_C_mce, 6},
    {"_hesim_C_enmbpi", (DL_FUNC) &_hesim_C_enmbpi, 6},
    {"_hesim_C_rgengamma_vec", (DL_FUNC) &_hesim_C_rgengamma_vec, 4},
    {"_hesim_rtruncnorm", (DL_FUNC) &_hesim_rtruncnorm, 4},
    {"_hesim_rpwexp", (DL_FUNC) &_hesim_rpwexp, 2},
    {"_hesim_rpwexp_vec", (DL_FUNC) &_hesim_rpwexp_vec, 3},
    {"_hesim_rcat", (DL_FUNC) &_hesim_rcat, 1},
    {"_hesim_rcat_vec", (DL_FUNC) &_hesim_rcat_vec, 2},
    {"_hesim_rdirichlet", (DL_FUNC) &_hesim_rdirichlet, 1},
    {"_hesim_rdirichlet_mat", (DL_FUNC) &_hesim_rdirichlet_mat, 2},
    {"_hesim_C_test_trapzfun", (DL_FUNC) &_hesim_C_test_trapzfun, 1},
    {"_hesim_C_test_trapz", (DL_FUNC) &_hesim_C_test_trapz, 2},
    {"_hesim_C_test_cumtrapzfun", (DL_FUNC) &_hesim_C_test_cumtrapzfun, 1},
    {"_hesim_C_test_simpsfun", (DL_FUNC) &_hesim_C_test_simpsfun, 1},
    {"_hesim_C_test_cumsimpsfun", (DL_FUNC) &_hesim_C_test_cumsimpsfun, 1},
    {"_hesim_C_psm_curves_summary", (DL_FUNC) &_hesim_C_psm_curves_summary, 4},
    {"_hesim_C_psm_sim_stateprobs", (DL_FUNC) &_hesim_C_psm_sim_stateprobs, 1},
    {"_hesim_C_psm_sim_wlos", (DL_FUNC) &_hesim_C_psm_sim_wlos, 5},
    {"_hesim_C_statevals_sim", (DL_FUNC) &_hesim_C_statevals_sim, 3},
    {"_hesim_C_test_xptr_test_time_fun", (DL_FUNC) &_hesim_C_test_xptr_test_time_fun, 1},
    {"_hesim_C_test_obs_index", (DL_FUNC) &_hesim_C_test_obs_index, 5},
    {"_hesim_C_test_add_constant_int", (DL_FUNC) &_hesim_C_test_add_constant_int, 2},
    {"_hesim_C_test_add_constant_double", (DL_FUNC) &_hesim_C_test_add_constant_double, 2},
    {"_hesim_C_rowmax", (DL_FUNC) &_hesim_C_rowmax, 1},
    {"_hesim_C_rowmax_index", (DL_FUNC) &_hesim_C_rowmax_index, 1},
    {"_hesim_test_zeroin", (DL_FUNC) &_hesim_test_zeroin, 0},
    {"_rcpp_module_boot_distributions", (DL_FUNC) &_rcpp_module_boot_distributions, 0},
    {"_hesim_RcppExport_registerCCallable", (DL_FUNC) &_hesim_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_hesim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
